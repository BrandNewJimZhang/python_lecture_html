[["index.html", "《面向科学研究的 Python 基础》讲义 Chapter 1 简介 1.1 课程面向对象 1.2 课程目的 1.3 参考书 1.4 鸣谢", " 《面向科学研究的 Python 基础》讲义 Jim Zhang 2022-11-04 Chapter 1 简介 本书是 Jim 在清华大学讲授的《面向科学研究的 Python 基础》课程讲义，主要内容包括： 序号 内容 学时 1 Python 简介与环境安装 2 2 基本语法与基本数据类型 2 3 流程控制与函数 2 Jupyter notebook 与 numpy（上） 4 numpy（下）与 pandas 2 总计 —— 8 另外，本课程的开发环境为 Visual Studio code + jupyter notebook + python 3.10。 1.1 课程面向对象 在进行讲义书写前，我假设读者： 有较薄弱编程基础。 对编程环境不是很熟悉。 不是很熟悉 Mac 或 Windows 操作系统，尤其是 terminal 和 PowerShell 等命令行工具。 比较熟悉线性代数知识，尤其是向量和矩阵运算。 1.2 课程目的 本课程的主要目的是为了让学生能够比较熟练地使用 Python 进行科学计算，因此，本课程的内容主要围绕科学计算展开，在讲述基本安装方法之后，主要讲述了 Python 的基本数据类型、流程控制、函数，最后是和科学计算息息相关的 numpy、pandas 等内容。在这些部分以大班课形式讲授之后，还有很多可供集中预约的模块化课程，包括：Python 与地理信息系统分析、计算物理等等。 1.3 参考书 本课程的主要参考资料为： Pine, D. J. (2019). Introduction to Python for science and engineering. CRC Press. Persson, M. V., &amp; Martins, L. F. (2016). Mastering Python Data Analysis. Packt Publishing Ltd. 1.4 鸣谢 非常感谢 GitHub copilot 的帮助，本讲义的不少内容（近 3 成）都是由 copilot 自动生成的。 以及非常感谢所有提出宝贵修改意见的同学们和清华大学研究生会学术部的大力支持！ "],["python-简介与环境安装.html", "Chapter 2 Python 简介与环境安装 2.1 简介 2.2 为什么我会推荐这样的开发环境？ 2.3 环境安装 2.4 作业与思考题", " Chapter 2 Python 简介与环境安装 注意，本讲撰写较早（Python 3.10.7@Windows, Python 3.10.7@MacOS, Python 3.10.6@Linux），可能会和授课时的版本有所不同，但是基本的语法几乎不会有变化。 2.1 简介 开源程序界总会流传着一些传说，比如 Linux 之父 Linus Torvalds 在卧室一天开发出版本控制软件 git 的核心功能（self-hosting，即用 git 提交 git 代码）。当然 Python 也不例外。1989 年的圣诞节，Python 之父 Guido van Rossum 很是无聊，于是他决定开发一个新的脚本语言，用来取代 ABC 语言。van Rossum 于 1991 年发布了 Python 第一个版本，也就是说到 Python 都已经到了三十而立的年纪了。有关 Python 的不同版本及其之间的关系，以及为什么我们这门课选择 Python 3.10，会在之后的章节展开描述。 2.1.1 Life is short, you need Python! Python 之父 Guido van Rossum 在 Twitter 分享的一个图片 大家可能或多或少会在各个地方（朋友圈广告，网络培训班，甚至视频分享平台等等）听到过这句话：人生苦短，我用 Python（其实英文原文是 “Life is short, you need Python.”）。这句话的意思是，Python 是一门非常简单易学的编程语言，可以让你在短时间内完成一些复杂的任务。这一节采用这句名言也是希望大家能够在学习 Python 过程中，能够感受到 Python 的简单易学，以及 Python 语言的强大。 2.1.1.1 解释性 如果大家撰写过 C 语言、C++ 语言等，会发现与这些语言不同的是，Python 语言在运行时完全不需要编译，只需要将源代码保存为 .py 文件，然后用 Python 解释器执行即可。这样做的好处是，可以快速迭代代码，而不用每次修改代码后都编译一次。这也是 Python 语言的一个特点，即开发效率高。 2.1.1.2 动态类型 在 C 语言中，你可能见过这样的代码： int a = 1; 而 Python 语言是一门动态类型语言，这意味着你不需要在代码中声明变量的类型，Python 解释器会自动推断变量的类型。这样做的好处是，可以让代码更加简洁，而不用每次声明变量的类型。比如： a = 1 这也是 Python 语言的一个特点，即代码简洁。 2.1.1.3 面向对象 首先，要先解释一下什么叫面向过程与面向对象。面向过程是一种编程范式，即将程序看作一系列的函数调用。比如现在有这样的一个问题：计算 1 到 100 的和。而面向对象是另一种编程范式，即将程序看作一系列的对象调用。面向对象的好处是，可以将程序的复杂度降低，让程序更加易于维护。如果用面向过程的编程范式来解决，可能会写出这样的代码： s = 0 for i in range(1, 101): s += i print(s) 而如果用面向对象的编程范式来解决，可能会写出这样的代码： class Sum: def __init__(self, n): self.n = n def sum(self): s = 0 for i in range(1, self.n + 1): s += i return s print(Sum(100).sum()) 这些代码看不懂并没有关系，我们以后还会提到并进行讲解。Python 语言是一门面向对象的语言，这也是 Python 语言的一个特点，即易于维护。 2.1.1.4 垃圾回收 Python 语言的另一个特点是，它有自己的垃圾回收机制。这意味着，当你不再使用某个变量时，Python 解释器会自动回收这个变量所占用的内存空间。这样做的好处是，可以让程序员不用关心内存的分配与回收，而可以更加专注于编写程序。 2.1.2 版本迭代 对于 Python 的版本而言，以 Python x.y.z 为例，大家的共识是 x 代表主版本号，y 代表大版本号（major version），z 代表小版本号（minor version）。 2.1.2.1 大版本号 Python 2.0 版本于 2000 年发布，Python 3.0 版本于 2008 年发布。由于这两个版本各自带来了全新的特性，也成为了 Python 语言的分水岭。Python 2.x 版本于 2020 年停止维护（Python 2.7.18），但是 Python 2.x 版本仍然有很多应用，比如一些老的项目，或者一些不得不兼容 Python 2.x 的第三方库（典型的是 ESRI 的 ArcGIS，仍然在使用 Python 2.7）。 现在市面上主要流行的是 Python 3.x 版本，根据 PEP 602 - Annual Release Cycle for Python 的建议，一个大版本会维护 5 年，从 Python 3.9 开始，每年都会发布一个新的大版本。Python 3.10 版本于 2021 年 10 月发布。 PEP 602 建议的 Python 发布周期 2.1.2.2 小版本号 有一些同学一定已经注意到了，Python 3.10.8 的 Windows 版本在 2022 年 10 月 11 日（也就是上周）发布。Python 的每一个小版本都是一个补丁版本，它会修复一些 bug，但是很少会添加特性。所以可以认为，Python 的小版本号的差异是不会影响到编程的。 2.2 为什么我会推荐这样的开发环境？ 2.2.1 Python 3.10 新特性 Python 3.10 版本于 2021 年 10 月发布（小版本发布时间表参见 PEP 619 – Python 3.10 Release Schedule），这个版本带来了很多新特性，比较重要的新特性包括： PEP 597 - Add optional EncodingWarning：在 Python 3.10 版本中，当你使用 open() 函数打开一个文件时，如果没有指定编码方式，那么 Python 解释器会发出一个警告，提示你应该指定编码方式。 PEP 604 - Allow using | in type hints：在 Python 3.10 版本中，类型提示中的 | 运算符可以用于表示联合类型（union type）。比如，int | str 表示 int 或 str 类型。 PEP 626 - Precise line numbers for debugging and other tools.：报错精准到行甚至是字符。 PEP 634 - Structural Pattern Matching: Specification：Python 3.10 版本中引入了模式匹配（pattern matching）语法，可以用于替代 if-elif-else 语句。 2.2.2 Visual Studio Code Visual Studio Code 是由 Microsoft 开发的一个开源的、跨平台的代码编辑器，它支持多种语言的开发，包括 Python。Visual Studio Code 的主要特点如下： 轻量级：Visual Studio Code 的安装包只有 50MB 左右，而且它的运行内存占用也很小（相对于 Spyder @ Anaconda）。 开源：Visual Studio Code 是一个开源项目，它的源代码托管在 GitHub 上，这也就意味着它免费（相对于 PyCharm）。 跨平台：Visual Studio Code 支持 Windows、macOS 和 Linux 等多种操作系统。 插件化：Visual Studio Code 支持插件化，你可以通过安装插件来扩展它的功能。 高度可定制：Visual Studio Code 支持高度的可定制性，你可以通过修改配置文件来定制它的行为。 快速：Visual Studio Code 的启动速度很快，它的响应速度也很快。 2.2.3 Jupyter Notebook Jupyter Notebook 是一个支持多语言的交互式笔记本，起初叫做 IPython Notebook，后来由于对 Julia、Python 和 R 三种语言的支持才改名叫 Jupyter Notebook。Jupyter Notebook 可以将一个程序单元格化，每个单元格可以包含代码、文本、图片、视频等内容，你可以在单元格中运行代码，然后查看运行结果。 2.3 环境安装 2.3.1 Python 2.3.1.1 Windows 2.3.1.1.1 物理安装法 首先下载 Python 安装包，以 Python 3.10.7 为例，前往 Python 3.10.7 的下载页面就好了。一般来说，64 位系统下载 64 位安装包，32 位系统下载 32 位安装包。对于 64 位的系统来说，下载 Windows installer (64-bit) 就可以了。 下载完成后，双击安装包，按照提示安装即可。注意，安装时一定要勾选 Add Python 3.10 to PATH 选项，这样就可以在任意目录下使用 Python 命令了。比如，我们使用 powershell 等命令行工具，就可以直接输入 python 命令来启动 Python 解释器了，比如： PS C:\\Users\\user&gt; python --version Python 3.10.7 2.3.1.1.2 包管理器法 本方法只适用于 Windows 10 1709（版本 16299）或更高版本，当然，Windows 11 也可以。 不会吧不会吧，不会还有人不知道 Windows 也有包管理器吧？大家可能多多少少听说过 Chocolatey，它是 Windows 下的包管理器，它可以帮助你安装各种软件，包括 Python。但是我不会推荐 Chocolatey，因为他是第三方的软件。 我在这里会推荐 winget，它是 Windows 官方的包管理器，它可以帮助你安装各种软件，包括 Python。 安装 winget 很容易，在 GitHub 上进入 winget-cli 的发行页面，在最新的发行版本中的 Assets 中点击 Microsoft.DesktopAppInstaller_xxxxxxxx.msixbundle 下载安装即可。 安装完成后，打开命令行工具，输入 winget，如果出现了 winget 的帮助信息，那么恭喜你，你已经成功安装了 winget。 接下来，我们就可以使用 winget 来安装 Python 了。在 Powershell 中输入 PS C:\\Users\\User&gt; winget install python 就可以安装最新的 Python 了。但是安装之后还得配置环境变量才行（这就是为什么在物理安装法中必须要 Add Python 3.10 to PATH 选项的原因），接下来是配置环境变量的方法。 2.3.1.2 macOS 实际上，如果你在使用 macOS Monterey 12.3 以上的版本，macOS 会自带一个 Python 3.8.9。我们可以通过在终端中查看 Python 的版本信息： $ python3 --version &amp;&amp; which python3 Python 3.8.9 /usr/bin/python3 如果是更早版本的话，还会存在一个 Python 2.7.18。 $ python --version &amp;&amp; which python Python 2.7.18 /usr/bin/python 我们需要使用 Python 3.10 来继续我们的学习。但是不要担心，我们完全没有必要卸载这些 Python 2.7 和 Python 3.8。在实际开发的过程中，多版本 Python 共存是一个很正常的事情。 我们可以通过 Homebrew 来安装 Python 3.10。首先我们来安装 Homebrew，按照 Homebrew 官网的说明，我们可以在终端中运行以下命令： $ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 然后我们就可以通过 Homebrew 来安装 Python 3.10 了： $ brew install python@3.10 安装完成后，我们可以通过 python3.10 命令来查看 Python 3.10 的版本信息： $ python3.10 --version &amp;&amp; which python3.10 Python 3.10.7 /opt/homebrew/bin/python3.10 以下部分可以不做。 现在电脑里有很多 Python3，但是每次还是： $ python3 --version &amp;&amp; which python Python 3.8.9 /usr/bin/python3 我们可以通过修改环境变量并重命名来让 python3 命令指向 Python 3.10： $ echo &#39;export PATH=&quot;/opt/homebrew/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc $ echo &#39;alias python3=&quot;python3.10&quot;&#39; &gt;&gt; ~/.zshrc $ source ~/.zshrc 这个时候重新开启一个终端（shell 进程），我们就可以通过 python3 命令来查看 Python 3.10 的版本信息了： $ python3 --version &amp;&amp; which python3 Python 3.10.7 /opt/homebrew/bin/python3 2.3.1.3 Linux 一般来说，你既然在使用 Linux 系统的话，你一定了解如何玩转 bash。但是我在这里也再以 debian 系发行版 ubuntu 20.04 为例，来简单介绍一下如何安装 Python 3.10。 debian 系发行版的包管理器是 apt，我们可以通过以下命令来安装 Python 3.10： $ sudo apt install python3.10 之后的处理方法和 macOS 系统类似。 2.3.2 Visual Studio Code Visual Studio Code 是一个非常好用的代码编辑器，我们可以通过 Visual Studio Code 官网 来下载安装。（点一下就行的那种） Visual Studio Code 安装好了之后，为了能够使用 Visual Studio Code 来进行 Python 开发，我们需要额外安装几个插件： Chinese (Simplified) Language Pack for Visual Studio Code - 用于支持中文 Python - 用于支持 Python 开发 Pylance - 用于支持 Python 开发 Jupyter - 用于支持 Jupyter Notebook 2.3.3 Jupyter Notebook jupyter 只是一个命令行工具，它可以帮助我们启动 Jupyter Notebook。我们可以通过以下命令来安装 Jupyter Notebook： $ pip install jupyter 安装完成后，我们在 Visual Studio Code 中打开一个目录，在目录中新建一个 *.ipynb 文件，就可以开始使用 Jupyter Notebook 了。 2.4 作业与思考题 在计算机科学中，为什么会提出垃圾回收这一概念？是为了解决何种问题？ 你还发现了什么有意思的 Visual Studio Code 插件？请分享给大家。 你在安装环境的时候遇到了什么问题？有没有设法解决？请将你的经验分享给大家。 "],["基本语法与基本数据类型.html", "Chapter 3 基本语法与基本数据类型 3.1 说明 3.2 格式规范 3.3 基本语法 3.4 基本数据类型及其基本操作 3.5 安装 package 3.6 运行一个 python 文件 3.7 思考题与作业", " Chapter 3 基本语法与基本数据类型 3.1 说明 本讲很多内容都是在 python 交互式环境下进行的，如果你想在本地运行，可以在命令行输入 python 进入交互式环境。比如： PS C:\\Users\\user&gt; python Python 3.10.7 (tags/v3.10.7:6cc6b13, Sep 5 2022, 14:08:36) [MSC v.1933 64 bit (AMD64)] on win32 Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; jimzhang@jimzhang ~ % python3 Python 3.10.7 (main, Sep 14 2022, 22:38:23) [Clang 14.0.0 (clang-1400.0.29.102)] on darwin Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; user@host:~$ python3 Python 3.10.6 (main, Aug 10 2022, 11:40:04) [GCC 11.3.0] on linux Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; 另外，为了方便（或者夸张地）解释一些问题，本讲 meme 浓度极高！如果大家不喜欢 meme 的话，Jim 在这里跟大家说一句抱歉！ 3.2 格式规范 First thing first，在学习 Python 编程之前，一定要养成一种编程习惯，最重要的习惯就是代码格式规范。代码格式的规范性会影响到代码的可读性，所以我们需要遵循一定的规范。这里推荐使用 PEP 8 - Style Guide for Python Code 这个规范。PEP 8 是由 Python 之父 Guido van Rossum 发起的，用于规范 Python 代码的格式。这个规范是 Python 社区的共识，所以我们也需要遵循这个规范。 虽然由于对于 Python 语言的不了解，你很有可能看不懂这个规范，但是你可以先大致了解一下有这么样的规范存在，然后在写代码的时候，请反复查阅这个规范并尽量遵循它。 不遵守 PEP 8 的 Python 开发者不是好的开发者 对了，我很厌恶不遵守 PEP 8 的人，不遵守 PEP 8 的代码真是让人看着就恼火啊！ 3.3 基本语法 3.3.1 变量 变量名必须是大小写英文、数字和 _ 的组合，且不能用数字开头。 &gt;&gt;&gt; variable = 1 &gt;&gt;&gt; variable1 = &#39;This is variable1&#39; &gt;&gt;&gt; _variable = [1, 2, 3] &gt;&gt;&gt; PI = 3.1415926 # 大家的共识是常量名用全大写字母 刚才的注释中提到了常量，这里我们先简单介绍一下常量。常量是指在程序运行过程中不会改变的量，在很多其他语言都有常量的概念，比如： // JavaScript const PI = 3.1415926; // C const double PI = 3.1415926; Python 里没有常量这个东西 但是在 Python 中，没有常量的概念，所以我们只能通过一种约定的方式来表示常量，即变量名全部大写。这种约定的方式在 Python 中是很常见的，比如 PI，E，INF，NAN 等等。 3.3.2 注释 不论是什么语言，都一定要写注释！在论文撰写完成投稿时，如果你的 supplement material 中没有注释，那么论文拒稿概率就会提高。原因也很简单，如果没有注释，那么你的代码就会变得难以阅读，别人也很难看懂你的代码。（甚至自己会看不懂自己的代码 XD） 经典，自己看不懂自己上一周写的代码 Python 中的注释有两种，一种是单行注释，一种是多行注释。 单行注释以 # 开头，多行注释以 ''' 或 \"\"\" 开头，以 ''' 或 \"\"\" 结尾。 # 这是单行注释 &#39;&#39;&#39; 这是多行注释 这是多行注释 这是多行注释 &#39;&#39;&#39; 3.3.3 缩进 不同于其他语言， （这里不能这么讲） Python 中的缩进是通过空格或 tab 实现的。缩进的空格数目没有限制，但是要保持一致。 if True: print(&#39;True&#39;) else: print(&#39;False&#39;) 3.3.4 分号与逗号 Python 中的分号 ; 与逗号 , 与 C 语言等语言中的用法完全不同，举个例子： &gt;&gt;&gt; a = 1; b = 2; c = 3 &gt;&gt;&gt; a, b, c = 1, 2, 3; print(a, b, c) 1 2 3 3.3.5 换行 这里的换行准确来说应该叫续行。Python 中的换行是通过 \\ 实现的。 &gt;&gt;&gt; a = 1 + 2 + 3 + \\ ... 4 + 5 + 6 + \\ ... 7 + 8 + 9 &gt;&gt;&gt; a 45 3.3.6 导入 package 这一节请参考 Geeks for Geeks 上的一篇文章：What is the difference between Python’s Module, Package and Library? 在上一讲中我们只介绍了 package 怎么下载，但是我们并没有介绍怎么使用 package。这一讲我们就来介绍一下 package 怎么使用。 在 Python 中，我们可以使用 import 语句来导入 package。比如我们要导入 math 这个 package，我们可以这样做： import math 这样我们就可以使用 math 这个 package 中的所有函数了。比如我们要计算 e 的 2 次方，我们可以这样做： import math print(math.exp(2)) 这里 math.exp 就是 math 这个 package 中的一个函数，它的作用是计算 e 的 x 次方。 我们也可以使用 from 语句来导入 package 中的某个函数。比如我们只想使用 math 这个 package 中的 exp 函数，我们可以这样做： from math import exp print(exp(2)) 对于一些名字比较长的 package（很多时候其实是约定俗成），我们可以使用 as 语句来给它起一个别名。 import numpy as np 这样我们就可以使用 np 来代替 numpy 了。 以下内容违反 PEP 8！！！！！ 在导入 package 的时候，逗号的正确使用可以让我们导入多个函数（或者 package）并且节省代码行数。 from math import exp, log, sqrt import numpy as np, pandas as pd, matplotlib.pyplot as plt 最后，欢迎大家在交互式环境中尝试一下该语句： &gt;&gt;&gt; import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren&#39;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you&#39;re Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it&#39;s a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let&#39;s do more of those! 3.3.7 保留字 Python 中的保留字是指在 Python 中已经被使用的关键字，不能用作变量名、函数名、类名等。 &gt;&gt;&gt; import keyword &gt;&gt;&gt; keyword.kwlist [&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;async&#39;, &#39;await&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;] 上述 keyword.kwlist 就是 Python 中的保留字列表。（后面我们会讲什么是列表） 3.3.8 异常 在 Python 中，异常是指程序在运行过程中出现的错误，比如除数为 0、缩进错误、变量未定义等等。 &gt;&gt;&gt; 1 / 0 Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; ZeroDivisionError: division by zero &gt;&gt;&gt; if True: ... print(&#39;True&#39;) File &quot;&lt;stdin&gt;&quot;, line 2 print(&#39;True&#39;) ^ IndentationError: expected an indented block after &#39;if&#39; statement on line 1 &gt;&gt;&gt; # 如果是较早版本的 Python 的话是 IndentationError: expected an indented block &gt;&gt;&gt; print(a) Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; NameError: name &#39;a&#39; is not defined 对于异常不要慌，需要精准定位异常的位置，然后根据异常的类型进行修复。（这里想一想怎么说？） 3.4 基本数据类型及其基本操作 整数、复数、浮点数、布尔值、None、字符串、列表、元组、字典、集合 type() 函数可以用来查看变量的类型。示例如下： &gt;&gt;&gt; a = 1 &gt;&gt;&gt; type(a) &lt;class &#39;int&#39;&gt; &gt;&gt;&gt; b = 1.0 &gt;&gt;&gt; type(b) &lt;class &#39;float&#39;&gt; &gt;&gt;&gt; c = 1 + 2j &gt;&gt;&gt; type(c) &lt;class &#39;complex&#39;&gt; 这里等号就是赋值运算符，a = 1 就是把 1 赋值给变量 a。 3.4.1 整数 整数是没有小数部分的数字，可以是正数、负数或零。 &gt;&gt;&gt; a = 1 一般来说，整数的运算符有 +、-、*、/、//、%、**。 &gt;&gt;&gt; 5 + 3 8 &gt;&gt;&gt; 5 - 3 2 &gt;&gt;&gt; 5 * 3 15 &gt;&gt;&gt; 5 / 3 # 除法 1.6666666666666667 &gt;&gt;&gt; 5 // 3 # 整除 1 &gt;&gt;&gt; 5 % 3 # 取余 2 &gt;&gt;&gt; 5 ** 3 # 乘方 125 另外，我们也可以对整数进行位运算，位运算符有 &amp;、|、^、~、&lt;&lt;、&gt;&gt;。 &gt;&gt;&gt; 5 &amp; 3 # 与 1 # 00000101 &amp; 00000011 = 00000001 &gt;&gt;&gt; 5 | 3 # 或 7 # 00000101 | 00000011 = 00000111 &gt;&gt;&gt; 5 ^ 3 # 异或 6 # 00000101 ^ 00000011 = 00000110 &gt;&gt;&gt; ~5 # 取反 -6 # ~00000101 = 11111010 + 1 = 11111011 &gt;&gt;&gt; 5 &lt;&lt; 3 # 左移 40 # 00000101 &lt;&lt; 3 = 00101000 &gt;&gt;&gt; 5 &gt;&gt; 3 # 右移 0 # 00000101 &gt;&gt; 3 = 00000000 3.4.2 复数 复数由实数部分和虚数部分构成，可以用 a + bj 或 complex(a, b) 表示，复数的实部a和虚部b都是浮点型。 &gt;&gt;&gt; a = 1 + 2j &gt;&gt;&gt; b = complex(1, 2) &gt;&gt;&gt; b (1+2j) 复数的运算符有 +、-、*、/。 &gt;&gt;&gt; a + b (2+4j) &gt;&gt;&gt; a - b (0+0j) &gt;&gt;&gt; a * b (-3+4j) &gt;&gt;&gt; a / b (1+0j) 3.4.3 浮点数 浮点数由整数部分与小数部分构成，浮点数运算可能会有四舍五入的误差。 &gt;&gt;&gt; a = 1.1 浮点数的运算符有 +、-、*、/。 &gt;&gt;&gt; 1.1 + 2.2 3.3000000000000003 &gt;&gt;&gt; 1.1 - 2.2 -1.1 &gt;&gt;&gt; 1.1 * 2.2 2.4200000000000004 &gt;&gt;&gt; 1.1 / 2.2 0.5 1.1 + 2.2 竟然不是 3.3，这是因为计算机内部表示浮点数时，采用的是二进制浮点数，而二进制浮点数的表示方法并不是十进制小数的表示方法，所以会出现这种情况。 不如我们先借用一下之后课程所需要的判断操作符来判断一下是否是这样（下方代码引入了判断运算符 == 和布尔值，这个我们马上就会提到）： &gt;&gt;&gt; a = 1.1 + 2.2 &gt;&gt;&gt; a == 3.3 False 那我们怎么解决呢？在实际科学研究中，我们通常会使用设定 tolerance 来判断两个浮点数是否相等，即： &gt;&gt;&gt; a = 1.1 + 2.2 &gt;&gt;&gt; abs(a - 3.3) &lt; 1e-10 True 大家可能注意到了，这里的 abs() 函数是求绝对值的函数，1e-10 是科学计数法， 3.4.4 布尔值 布尔值得名于英国数学家和逻辑学家乔治·布尔（George Boole），他是第一个研究代数逻辑的数学家，他的逻辑学被称为布尔代数。 布尔值只有 True、False 两种值，要么是 True，要么是 False，在 Python中，可以直接用 True、False 表示布尔值（请注意大小写），也可以通过布尔运算计算出来。 &gt;&gt;&gt; a = True &gt;&gt;&gt; b = False 说起布尔值，就一定要说到比较运算符和逻辑运算符。 3.4.4.1 比较运算符 比较运算符用于比较两个值的大小，比较运算符有 &gt;、&lt;、&gt;=、&lt;=、==、!=。 &gt;&gt;&gt; 1 &gt; 2 False &gt;&gt;&gt; 1 &lt; 2 True &gt;&gt;&gt; 1 &gt;= 2 # 大于等于 False &gt;&gt;&gt; 1 &lt;= 2 # 小于等于 True &gt;&gt;&gt; 1 == 2 # 等于 False &gt;&gt;&gt; 1 != 2 # 不等于 True 3.4.4.2 逻辑运算符 逻辑运算符用于连接多个比较运算符，逻辑运算符有 and、or、not。 &gt;&gt;&gt; 1 &gt; 2 and 1 &lt; 2 False &gt;&gt;&gt; 1 &gt; 2 or 1 &lt; 2 True &gt;&gt;&gt; not 1 &gt; 2 True 现在我们这里引入括号来看一个很有趣的问题。括号的作用和在数学中一样，用来改变运算的优先级。这样的话我们来看一些有意思的问题： &gt;&gt;&gt; 1 &gt; 2 or 1 &lt; 2 True &gt;&gt;&gt; 1 &gt; (2 or 1) &lt; 2 False 注意，a or b 的值的确定方法是：如果 a 的值为 True，则 a or b 的值为 a，否则 a or b 的值为 b。所以 2 or 1 的值为 2，所以接下来问题就变成了 1 &gt; 2 &lt; 2，这个问题的答案是 False。 False 在数值上等于 0，True 在数值上等于 1。 &gt;&gt;&gt; 1 &gt; (2 or 1) &lt; 2 False &gt;&gt;&gt; 1 &gt; 2 &lt; 2 False &gt;&gt;&gt; False &lt; 2 3.4.5 None None是Python里一个特殊的类型，用来表示什么都没有，它只有一个值，就是None。 &gt;&gt;&gt; a = None 3.4.6 字符串 从字符串开始，我们将会引入两个新的概念——属性和方法。 字符串是以单引号或双引号括起来的任意文本，比如 'abc'，\"xyz\" 等等。 &gt;&gt;&gt; a = &#39;abc&#39; &gt;&gt;&gt; b = &quot;xyz&quot; 3.4.7 列表 列表是一种有序的集合，可以随时添加和删除其中的元素。 &gt;&gt;&gt; a = [1, 2, 3] 3.4.8 元组 元组是另一种有序的列表，但是元组一旦初始化就不能修改。 &gt;&gt;&gt; a = (1, 2, 3) 3.4.9 字典 字典是一种无序的集合，使用键-值（key-value）存储，具有极快的查找速度。 &gt;&gt;&gt; a = {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} 3.4.10 集合 集合是一种无序的不重复元素序列。 &gt;&gt;&gt; a = {1, 2, 3} 3.5 安装 package 3.6 运行一个 python 文件 write something… 3.7 思考题与作业 "],["流程控制.html", "Chapter 4 流程控制 4.1 顺序结构 4.2 选择结构 4.3 循环结构 4.4 什么是 iterable？", " Chapter 4 流程控制 流程控制是指程序执行的顺序控制，包括顺序结构、选择结构和循环结构。 4.1 顺序结构 顺序结构是最简单的程序结构，它是指程序中的语句按照顺序执行，每个语句执行完毕后，再执行下一个语句。 4.2 选择结构 选择结构是指程序执行时，根据条件的不同，选择不同的执行路径。 4.2.1 if 语句 if 语句是最简单的选择结构，它的语法格式如下： if condition: statement elif another condition: another statement else: final statement if 语句的执行流程如下： 首先计算 condition 的值，如果为 True，则执行 statement 语句块，然后结束 if 语句的执行；如果为 False，则计算 another condition 的值，如果为 True，则执行 another statement 语句块，然后结束 if 语句的执行；如果为 False，则执行 final statement 语句块，然后结束 if 语句的执行。 如果 if 语句中只有一个条件，没有 elif 和 else 语句，则当 condition 为 True 时执行 statement 语句块，当 condition 为 False 时，不执行任何语句。 如果 if 语句中只有一个条件，没有 elif 语句，但有 else 语句，则当 condition 为 True 时执行 statement 语句块，当 condition 为 False 时，执行 final statement 语句块。 4.2.2 match 语句 match 语句是 Python 3.10 新增的选择结构，它的语法格式如下： match value: case condition: statement case another condition: another statement case _: final statement 这很容易理解，我们举个例子： lang = input(&quot;Enter your language: &quot;) match lang: case &quot;Python&quot;: print(&quot;You are learning Python&quot;) case &quot;Java&quot;: print(&quot;You are learning Java&quot;) case &quot;C++&quot;: print(&quot;You are learning C++&quot;) case _: print(&quot;You are learning something else&quot;) 这个例子中，我们使用 match 语句来判断用户输入的语言，如果是 Python、Java 或 C++，则输出相应的提示，否则输出 You are learning something else。 4.3 循环结构 循环结构是指程序执行时，根据条件的不同，重复执行某段代码。 4.3.1 while 循环 while 循环是一种循环结构，它的语法格式如下： while condition: statement while 循环的执行流程如下： 首先计算 condition 的值，如果为 True，则执行 statement 语句块，然后再次计算 condition 的值，如果为 True，则继续执行 statement 语句块，直到 condition 的值为 False，则结束 while 循环的执行。 4.3.2 for 循环 for 循环是另一种循环结构，它的语法格式如下： for item in iterable: statement for 循环的执行流程如下： 4.3.3 提前退出循环 4.3.3.1 break 4.3.3.2 continue 4.4 什么是 iterable？ iterable 是指可以被迭代的对象，它可以是一个序列，也可以是一个生成器，也可以是一个迭代器。 4.4.1 序列 序列是指可以通过索引来访问元素的对象，它包括字符串、列表、元组、字节序列、字节数组、range 对象等。 4.4.2 生成器 生成器是指使用 yield 关键字的函数，它可以生成一个生成器对象。 4.4.3 迭代器 迭代器是指实现了 __iter__() 和 __next__() 方法的对象，它可以生成一个迭代器对象。 "],["函数.html", "Chapter 5 函数 5.1 作用域 5.2 递归", " Chapter 5 函数 在介绍了变量之后，我们来看看函数。函数是一段代码，它可以被多次调用。函数可以接受参数，也可以返回值。 函数的定义使用关键字 def，后面跟着函数名和圆括号 ()。圆括号中可以定义参数（parameters），多个参数之间使用逗号 , 分隔。函数体以冒号 : 开始，并且必须缩进。 def function_name(parameter1, parameter2): # do something return something 函数的定义不会被执行，只有在调用函数时才会执行函数体中的代码。调用函数很容易，只需要在函数名后面加上圆括号 () 即可。 function_name(argument1, argument2) 在函数定义时的 parameter1 和 parameter2 是形参（formal parameters），在函数调用时被实参（actual parameters）argument1 和 argument2 替换。具体的例子如下： def add(a, b): return a + b print(add(1, 2)) 我们再来看看 return 关键字。return 用于返回函数的值，如果没有 return 语句，函数会返回 None。return 语句可以出现在函数体的任何位置，一旦执行到 return 语句，函数就会返回，不会再执行后面的语句。举个例子： def add(a, b): print(a + b) return &#39;Mission complete.&#39; print(a + 2 * b) print(add(1, 2)) 输出结果为： 1 2 Mission complete. 可以看到，print(a + 2 * b) 没有被执行。 5.1 作用域 在函数中定义的变量只能在函数内部使用，这个变量的作用域是局部的。如果在函数外部定义了一个变量，那么这个变量的作用域是全局的，可以在函数内部使用。 a = 1 def add(b): return a + b print(add(2)) 输出结果为： 3 如果在函数内部定义了一个与全局变量同名的变量，那么函数内部的变量会覆盖全局变量。 a = 1 def add(a, b): return a + b print(add(2, 3)) 输出结果为： 5 5.2 递归 递归是一种常见的算法，它的思想是把一个问题分解成多个子问题，然后逐个解决子问题。递归函数就是在函数内部调用自身。 def factorial(n): if n == 1: return 1 else: return n * factorial(n - 1) "],["jupyter-notebook-2.html", "Chapter 6 Jupyter Notebook", " Chapter 6 Jupyter Notebook "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
